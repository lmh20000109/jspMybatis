<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.lmh.mapper.BrandMapper">


<!--    数据库的字段名称 和 实体类的属性名称不一样，则不能自动封装数据
    1、起别名：对不一样的列名取别名，让别名和实体类的属性名一样
        缺点：每次查询都要定义一次别名
                :解决，抽取sql片段
                    缺点：不灵活
     2、resultMap
     1、定义<resultMap>标签
     2、在<select>标签中，使用resultMap属性替换，resultType属性
-->
<!--抽取片段-->
<!--    <sql id="brand_colum">-->
<!--        id,brand_name as brandName,company_name as companyName,orderd,description,status-->
<!--    </sql>-->
<!--    <select id="selectAll" resultType="Brand">-->
<!--        select-->
<!--        <include refid="brand_colum"></include>-->
<!--        from tb_brand;-->
<!--    </select>-->


<!--    2、最常用，resultMap
        id:唯一标识
        type：映射的类型，支持别名

-->
    <resultMap id="brandResultMap" type="brand">
<!--
        id:完成主键字段的映射
        colum：表的列名
        property：实体类的属性名
        result：完成一般字段的映射
-->
        <result column="brand_name" property="brandName"></result>
        <result column="company_name" property="companyName"/>
    </resultMap>



    <select id="selectAll" resultMap="brandResultMap">
    select  * from tb_brand;
    </select>


<!--
    参数占位符
    1、#{id}：将其替换为 ？ 为了防止sql注入
    2、${id}：拼sql。会存在sql注入问题
    3、使用时机
        *在参数传递的时候：用#{}
        *${id}：表名或者列名不固定的情况下，会存在sql注入问题


        *参数类型：parameterType="int"
        可以省略，一般没人写，但是要知道


        *特殊字符的处理
        select  *
        from tb_brand where id <（这个小于号要报错） #{id};
            处理：1、转义字符
                        < 号就是  &lt;
                2、CDATA区
                        快捷键CD
                            <![CDATA[
           （把小于号写在里面） <    (会当做纯文本来执行)
                            ]]>


 -->
    <select id="selectById" parameterType="int" resultMap="brandResultMap">
        select  *
        from tb_brand where id = #{id};
    </select>


<!--
        条件查询
-->
<!--<select id="selectByCondition" resultMap="brandResultMap">

    select * from tb_brand
    where status = #{status}
        and company_name like #{companyName}
        and brand_name like #{brandName}

</select>-->

<!--
    动态条件查询
        *if：条件判断
            *test：逻辑表达式
        *问题：第一个条件不存在时，SQL语句的Where语句拼接有问题
           解决方式 *恒等式  where 1 = 1
                   *<where> 替换 where 关键字


-->

    <select id="selectByCondition" resultMap="brandResultMap">
        select * from tb_brand
--         where 1=1
        <where>
            <if test="status != null">
                status = #{status}
            </if>
            <if test="companyName != null and companyName != ''">
                and company_name like #{companyName}
            </if>
            <if test="brandName != null and brandName != ''">
                and brand_name like #{brandName}
            </if>
        </where>
    </select>

<!--
    单条件动态查询

-->
    <!--<select id="selectByConditionSingle"  resultMap="brandResultMap">
        select  * from  tb_brand
        where
        <choose>&lt;!&ndash; 相当于Switch &ndash;&gt;
            <when test=" status != null ">&lt;!&ndash; 相当于case &ndash;&gt;
                status = #{status}
            </when>
            <when test="CompanyName != null and companyName != ''">
                company_name like #{companyName}
            </when>
            <when test="brandName != null and brandName != '' ">
                brand_name like #{brandName}
            </when>
&#45;&#45;             当用户没有写条件时，otherwise生效
            <otherwise>
                1 = 1
            </otherwise>

        </choose>


    </select>-->
    <select id="selectByConditionSingle"  resultMap="brandResultMap">
        select  * from  tb_brand
        <where>
            <choose><!-- 相当于Switch -->
                <when test=" status != null "><!-- 相当于case -->
                    status = #{status}
                </when>
                <when test="companyName != null and companyName != ''">
                    company_name like #{companyName}
                </when>
                <when test="brandName != null and brandName != '' ">
                    brand_name like #{brandName}
                </when>
            </choose>
        </where>



    </select>


    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand(brand_name,company_name,orderd,description,status)
        values (#{brandName},#{companyName},#{orderd},#{description},#{status});
    </insert>


<!--    修改


-->
    <!--<update id="update">
    update tb_brand
    set brand_name = #{brandName},
        company_name = #{companyName},
        orderd = #{orderd},
        description = #{description},
        status = #{status}
        where id = #{id}

    </update>-->

<!--   动态修改 -->
    <update id="update">
        update tb_brand

            <set>
                <if test="brandName != null and brandName != ''">
                    brand_name = #{brandName},
                </if>
                <if test="companyName != null and companyName != ''">
                    company_name = #{companyName},
                </if>
                <if test="orderd != null and orderd != ''">
                    orderd = #{orderd},
                </if>
                <if test="description != null and description != ''">
                    description = #{description},
                </if>
                <if test="status != null and status != ''">
                    status = #{status}
                </if>
            </set>







        where id = #{id}

    </update>


    <delete id="deleteById">
        delete from tb_brand where id = #{id}

    </delete>

    <!--
        动态批量删除
            mybatis会将数组参数封装为一个map集合
                *默认：array = 数组
                    这时foreach中的Collection要写为array <foreach collection="array"></foreach>
                *使用@Param注解改变map集合的默认key名称
                     mapper.java 中方法加上@Param===>void deleteByIds(@Param("ids") int[] ids);
                      这时Collection中可以写为设置的key名称 ===><foreach collection="ids"></foreach>


    -->
    <delete id="deleteByIds">
        delete from tb_brand where id
            in
                <foreach collection="ids" item="id" separator="," open="(" close=")">
                    #{id}
                </foreach>
    </delete>

</mapper>